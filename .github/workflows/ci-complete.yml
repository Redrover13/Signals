name: Dulce de Saigon - Complete CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to production after successful build'
        required: false
        default: 'false'

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  HUSKY: 0 # Disable Husky in CI

jobs:
  # Job 1: Security Scanning
  security-scan:
    name: Security & Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better detection

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run Secretlint
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: |
          npm install -g secretlint @secretlint/secretlint-rule-preset-recommend
          secretlint "**/*"

      - name: GitGuardian scan
        uses: GitGuardian/ggshield-action@v1.25.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  # Job 2: Dependency Audit
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      

      - name: Install pnpm (npm fallback)
        run: npm install -g pnpm

      - name: Audit dependencies
        run: pnpm audit --audit-level=moderate

      - name: Check licenses
        run: |
          npx license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD-3-Clause;BSD-2-Clause;ISC;CC0-1.0;UNLICENSED'

  # Job 3: Build & Test Matrix
  build-test:
    name: Build & Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs: [security-scan]
    strategy:
      matrix:
        node-version: [18, 20, 22]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for Nx affected

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.4

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-


      - name: Debug pnpm installation
        run: |
          echo "PATH: $PATH"
          which pnpm || true
          pnpm --version || true

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Derive appropriate SHAs for base and head
        uses: nrwl/nx-set-shas@v4

      - name: Run format check
        run: pnpm nx format:check

      - name: Lint affected projects
        run: pnpm nx affected:lint --parallel=3

      - name: Test affected projects
        run: pnpm nx affected:test --parallel=3 --coverage

      - name: Build affected projects
        run: pnpm nx affected:build --parallel=3

      - name: Upload coverage reports
        if: matrix.node-version == 20
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Job 4: E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build-test]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run E2E tests
        run: pnpm nx affected:e2e --parallel=1

  # Job 5: Vietnamese Localization Check
  localization-check:
    name: Vietnamese Localization Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check Vietnamese translations
        run: |
          # Check for Vietnamese language files
          find . -name "*.vi.json" -o -name "vi.json" -o -name "*_vi.properties" | head -20
          
          # Validate currency formatting (VND)
          grep -r "VND\|₫\|đồng" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" . || echo "No currency references found"

  # Job 6: Google Cloud Build Integration
  cloud-build:
    name: Google Cloud Build
    runs-on: ubuntu-latest
    needs: [build-test, dependency-audit]
    if: github.ref == 'refs/heads/main' || github.event.inputs.deploy == 'true'
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Submit to Cloud Build
        run: |
          gcloud builds submit \
            --config=cloudbuild.yaml \
            --substitutions=_GITHUB_SHA=${{ github.sha }},_GITHUB_REF=${{ github.ref }}

  # Job 7: Nx Cloud Recording
  nx-cloud:
    name: Nx Cloud Insights
    runs-on: ubuntu-latest
    if: always()
    needs: [build-test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Nx Graph
        run: pnpm nx graph --file=nx-graph.json

      - name: Upload Nx Graph
        uses: actions/upload-artifact@v4
        with:
          name: nx-dependency-graph
          path: nx-graph.json

  # Job 8: Release Management
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [cloud-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release

  # Job 9: Security Policy Check
  security-policy:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check Security Headers
        run: |
          # Check for security headers in configs
          grep -r "Content-Security-Policy\|X-Frame-Options\|X-Content-Type-Options" . --include="*.json" --include="*.js" --include="*.ts" || echo "Warning: No security headers found"

      - name: Check for exposed ports
        run: |
          # Check for hardcoded ports that might expose services
          grep -r ":[0-9]\{4,5\}" . --include="*.env*" --include="*.yml" --include="*.yaml" | grep -v "localhost\|127.0.0.1\|0.0.0.0" || echo "No exposed ports found"

  # Job 10: Performance Budget Check
  performance:
    name: Performance Budget
    runs-on: ubuntu-latest
    needs: [build-test]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Check bundle sizes
        run: |
          # This would integrate with your bundle analyzer
          echo "Bundle size checks would run here"

# Notification job
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    if: always()
    needs: [security-scan, dependency-audit, build-test, cloud-build]
    steps:
      - name: Send notification
        run: |
          echo "CI/CD Pipeline completed"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Dependency Audit: ${{ needs.dependency-audit.result }}"
          echo "Build & Test: ${{ needs.build-test.result }}"
          echo "Cloud Build: ${{ needs.cloud-build.result }}"